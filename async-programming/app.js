// JavaScript ဟာ Single-Threaded ပုံစံအလုပ်လုပ်တဲ့ နည်းပညာဖြစ်ပါတယ်။ ဒါကိုမျက်စိထဲမှာ မြင်သာအောင် ယာဉ်ကြောတစ်ခုပဲရှိတဲ့ ကားလမ်းတစ်ခုလို မြင်ကြ ည့်နိုင်ပါတယ်။ ပျော်ပွဲစားထွက်ဖို့ ကားသုံးစီးထွက်လာတယ်ဆိုရင် ယာဉ်ကြောတစ်ခုပဲရှိတဲ့အတွက် ရှေ့နောက်တန်းစီပြ ီးသွားကြ ရမှာပါ။ ရှေ့ကတစ်စီးအကြောင်းတစ်ခုခုကြောင့် နှေးသွားရင် နောက်က ကားတွေလည်း လိုက်နှေးသွားမှာပါပဲ။

// Multi-Threaded စနစ်တွေကိုတော့ ဒီဥပမာနဲ့ နှိုင်ယှဉ်ပြောရမယ်ဆိုရင် ယာဉ်ကြောသုံးခုပါတဲ့ ကားလမ်းနဲ့တူပါတယ်။ ကားသုံးစီးက ပြ ိုင်တူယှဉ်ပြ ီးသွားလို့ ရပါတယ်။ ဒါကြောင့် တစ်စီးနှေးနေရင် စောင့်စရာမလိုဘဲ ကျန်တဲ့ကားတွေကို ဆက်သွားလို့ ရနိုင်ပါတယ်။

// Multi-Threaded စနစ်တွေဟာ ကိုင်တွယ်တတ်မယ်ဆိုရင် ပိုမြန်ပါတယ်။ ဒါပေမယ့်သူ့မှာ အခက်အခဲတစ်ခုတော့ ရှိနေပါတယ်။ ကားသုံးစီးမှာ တစ်စီးက ပန်းကန်ခွက်တွေ ယူလာတယ်။ နောက်တစ်စီးက စားစရာတွေ ယူလာတယ်။ နောက်တစ်စီးက သောက်စရာတွေ ယူလာတယ် ဆိုကြ ပါစို့။ Single-Threaded စနစ်တွေမှာ အားလုံးက အတူတူပဲ သွားကြတာမို့လို့ စောင့်ရတဲ့အတွက် နှေးချင်နှေးမယ်၊ နောက်ဆုံးခရီးရောက်တဲ့အခါ အတူတကွ ပါလာတဲ့ ပန်းကန်ခွက်ယောက်၊ စားသောက်ဖွယ်ရာတွေ ချပြ ီး ပျော်ပွဲစားကြ ယုံပါပဲ။

// Multi-Threaded စနစ်မှာ တစ်စီးကနှေးပြ ီး ကျန်ခဲ့လို့ ကျန်တဲ့နှစ်စီးက ရောက်နှင့်တဲ့အခါ ဘာလုပ်မလဲစဉ်းစားစရာ ရှိလာပါတယ်။ သောက်စရာယူလာတဲ့ကား ကျန်ခဲ့ရင် ကိစ္စမရှိဘူး။ ပန်းကန်ခွက်နဲ့ စားစရာတွေ ကြ ိုပြ င်ထားလိုက်ရင် မြ န်သွားတာပေါ့။ ပန်းကန်ခွက်တွေယူလာတဲ့ကား ကျန်ခဲ့ရင်တော့ အဆင်မပြေတော့ပါဘူး။ သူရောက်အောင် စောင့်ရပါတော့မယ်။ နောက်ပြ ဿနာက ဘယ်လောက်စောင့်ရမှာလဲ။ ဘီးပေါက်လို့ ကြ ာနေတာမျိုးဆိုရင် ကြ ာတော့ကြ ာမယ်၊ အချနိ ်တန်ရင် ရောက်လာပါလိမ့်မယ်။ လမ်းမှားလို့ကြ ာနေတာမျုိ း ဆရို င်တော့၊ စောင့်သာစောင့်နေတာ ရောက်မလာဘူးဆိုတာမျုိးတွေ ဖြစ်နိုင်ပါတယ်။ Multi-Thread Communication စနစ်တွေနဲ့ ကျကျနန စီမံတတ်ဖို့ လိုသွားပါတယ်။

// JavaScript ကတော့ Single-Thread စနစ်ပ ါ။ Single-Thread မို့လို့ လမ်းကြောတစ်ခုထဲမှာပဲ တစ်ခုပြ ီးမှတစ်ခုလုပ်ပါတယ်။ ဒါဆိုရင် အလုပ်တစ်ခုက ကြ ာနေရင် တစ်ကယ်ပဲ ကျန်တဲ့အလုပ်တွေ ရှေ့ဆက်လို့မရတေ ာ့ဘဲ စောင့်ရတေ ာ့မှာလား။ ဒီလိုမဖြ စ်အောင်တော့ စီစဉ်ထားပါတယ်။ ဒီအတွက် Message Queue, Frame Stack, Event Loop စတဲ့ သီအိုရီပိုင်းဆိုင်ရာ သဘေ ာသဘာဝတွေ ရှိပါတယ်။

// 1. Message Queue : တန်းစီပြ ီးသွားနေတဲ့ ကားတန်းကို အစီအစဉ်အတိုင်း တစ်ခုပြ ီးတစ်ခု လုပ်ရမယ့် Messages Queue လို့မြင်နိုင်ပါတယ်။

// 2. Frame Stack : ကားတစ်စီးတိုင်းမှာ လိုအပ်တဲ့ပစ္စည်းတွေ ထပ်ထပ်ပြ ီးတော့ တင်ထားပါတယ်။ အဲ့ဒါကို Frames Stack လို့ မြင်နိုင်ပါတယ်။

// 3. Event Loop : ကားတွေထဲက ပစ္စည်းတွေကို ချတေ ာ့မယ်ဆိုရင် ကားတွေတန်းစီ၊တစ်စီးဝင်၊ ပါတဲ့ပစ္စည်းတွေ တစ်ခုပြ ီး တစ်ခုချ၊ ပစ္စည်းတစ်ခုက ညပ်နေလို့ ချလို့မရဘူးဆိုရင် နောက်မှာသွားပြ န်တန်းစီ၊ နောက်တစ်စီးဝင်၊ ပါတဲ့ပစ္စည်းတွေ တန်းစီချ၊ ပြ ီးရင်ထွက် စသဖြ င့် အစီအစဉ်အတိုင်းအလုပ်လုပ်သွားတဲ့ သဘေ ာကို Event Loop လို့ခေါ်ပါတယ်။ Event Loop က ချစရာပစ္စည်းမရှိတဲ့အခါဖယ်ခိုင်းပါတယ်။ ဖယ်တဲ့အခါ လုံးဝဖယ်လိုက်တာ ဖြစ်နိုင်သလို၊ ကျန်နေသေးလို့ နောက်ကပြ န်ဝင်စီတာမျုိးလည်း ဖြစ်နိုင်ပါတယ်

// ဒီနည်းနဲ့ အရမ်းကြ ာမယ့်အလုပ်တွေ မပြ ီးမချင်း နောက်အလုပ်တွေက စောင့်နေစရာ မလိုတော့ပါဘူး။ Single-Threaded ဆိုပေမယ့် မလိုအပ်ဘဲ မကြ ာတော့ပါဘူး။